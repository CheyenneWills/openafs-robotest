#!/usr/bin/env python
# Copyright (c) 2014-2017 Sine Nomine Associates
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED 'AS IS' AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import os
import sys
import logging
import argparse
import gettext

try:
    import argcomplete
except ImportError:
    argcomplete = None

import afsutil.system
import afsutil.build
import afsutil.package
import afsutil.service
import afsutil.transarc
import afsutil.rpm
import afsutil.keytab
import afsutil.cell

logger = logging.getLogger('afsutil')

def set_log_options(args):
    options = {}
    options['level'] = logging.INFO
    if args.quiet:
        options['level'] = logging.ERROR
    if args.verbose:
        options['level'] = logging.DEBUG
    if args.log:
        options['filename'] = args.log
    if args.log_format:
        options['format'] = args.log_format
    elif args.log:
        options['format'] = '%(asctime)s %(levelname)s %(message)s'
    else:
        options['format'] = '%(message)s'
    logging.basicConfig(**options)

# Customize the argument parser to display the full help instead
# of the abbreviated usage message on errors. Perhaps overkill,
# but feels friendlier since this is a custom tool.
class ArgParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        argparse.ArgumentParser.__init__(self, *args, **kwargs)
    def error(self, message):
        self.print_help(sys.stderr)
        self.exit(2, gettext.gettext('\n%s: error: %s\n') % (self.prog, message))

def _add_common_arguments(p):
    p.add_argument('-v', '--verbose', action='store_true', help='print debug messages')
    p.add_argument('-q', '--quiet', action='store_true', help='do not print info messages')
    p.add_argument('-l', '--log', help='log file location (default: stderr)', default=None)
    p.add_argument('--log-format', help='logging format: see pydoc logging.Formatter', default=None)

def main():
    nproc = afsutil.system.nproc() # default --jobs
    parser = ArgParser()
    subparsers = parser.add_subparsers(title="sub-commands", metavar="<command>")

    p = subparsers.add_parser('version', help='print version information')
    p.set_defaults(fn=afsutil.print_version, must_be_root=False)
    _add_common_arguments(p)

    p = subparsers.add_parser('getdeps', help='install build dependencies')
    p.set_defaults(fn=afsutil.build.getdeps, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('--creds', help='location of repo creds (maybe url)', default='/root/creds')

    p = subparsers.add_parser('check', help='check system')
    p.set_defaults(fn=afsutil.system.check, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--fix-hosts', help='fix /etc/hosts file by replacing loopback entry.', action='store_true')

    p = subparsers.add_parser('build', help='build binaries')
    p.set_defaults(fn=afsutil.build.build, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--chdir', help='change to directory', default=None)
    p.add_argument('--cf', help='configure options, e.g., --cf="--enable-debug"', default=None)
    p.add_argument('--target', help='make target (default: all)', default='all')
    p.add_argument('--no-clean', dest='clean', help='do not run git clean', action='store_false')
    p.add_argument('--no-transarc-paths', dest='transarc_paths', help='do not use transarc paths', action='store_false')
    p.add_argument('--no-modern-kmod-name', dest='modern_kmod_name', help='do not name the kmod openafs.ko on linux',
                       action='store_false')
    p.add_argument('-j', '--jobs', help='parallel build jobs (default: %d)' % nproc, default=nproc)
    p.add_argument('--srcdir', help='source code directory (default: .)', default='.')
    p.add_argument('--tarball', help='path and file name of dest tarball (default: openafs-<sysname>.tar.gz)', default=None)

    p = subparsers.add_parser('reload', help='reload the kernel module after a build')
    p.set_defaults(fn=afsutil.build.modreload, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('--chdir', help='change to directory', default=None)

    p = subparsers.add_parser('package', help='build packages')
    p.set_defaults(fn=afsutil.package.package, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--chdir', metavar='<path>', help='change to directory', default=None)
    p.add_argument('--with-mock', metavar='<chroot>', dest='chroot', help='build in mock chroot', default=None)
    p.add_argument('--dstdir', metavar='<dstdir>', help='where to place rpms (--with-mock only)', default=None)
    p.add_argument('--clobber', help='rebuild and overwrite existing kmods (--with-mock only)', action='store_true')
    p.add_argument('--no-clean', dest='autoclean', help='do not clean after build (--with-mock only)', action='store_false')
    p.add_argument('--build', metavar='<target>',
                   help='one of: all, srpm, userspace, kmods (default: all)',
                   choices=['all','srpm','userspace','kmods'], default='all')
    p.add_argument('--csdb', metavar='<csdb>', help='CellServDB file path (default: download)', default=None)
    p.add_argument('--spec', metavar='<spec>', help='spec file path (default: in-tree spec file)', default=None)
    p.add_argument('--arch', metavar='<arch>', help='target architecture, e.g. x86_64  (default: current arch)', default=None)
    p.add_argument('--kversion', metavar='<kernel-version>', dest='kversions', nargs='+', action='append',
                   help='linux kernel versions; may be given more than once (default: detect)')

    p = subparsers.add_parser('install', help='install binaries')
    p.set_defaults(fn=afsutil.install.install, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('--chdir', help='change to directory', default=None)
    p.add_argument('--dist', choices=['transarc', 'rpm'], help='distribution type', default='transarc')
    p.add_argument('--dir', help='distribution directory', default=None)
    p.add_argument('--components', metavar='<name>', nargs='+', choices=['client', 'server'],
                   help='components to install', default=['client', 'server']),
    p.add_argument('--cell', help='cell name (default: localcell)', default='localcell')
    p.add_argument('--hosts', nargs='+', help='cell service db hosts (default: this host)', default=None)
    p.add_argument('--realm', help='realm name (default: LOCALCELL)', default=None)
    p.add_argument('--csdb', help='path to CellServDB.dist file for client (default: none)', default=None)
    p.add_argument('--force', action='store_true', help='overwrite existing files')
    p.add_argument('-o', '--options', nargs='+', help="command line args: <name>=<value>", action='append')
    p.add_argument('--pre', dest='pre_install', help='pre-install command (default: none)', default=None)
    p.add_argument('--post', dest='post_install', help='post-install command (default: none)', default=None)

    p = subparsers.add_parser('remove', help="remove binaries")
    p.set_defaults(fn=afsutil.install.remove, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('--dist', choices=['transarc', 'rpm'], help='distribution type', default='transarc')
    p.add_argument('--components', metavar='<name>', nargs='+', choices=['client', 'server'],
                   help='components to remove', default=['client', 'server']),
    p.add_argument('--purge', action='store_true', help='remove config and data too')
    p.add_argument('--pre', dest='pre_remove', help='pre-remove command (default: none)', default=None)
    p.add_argument('--post', dest='post_remove', help='post-remove command (default: none)', default=None)

    p = subparsers.add_parser('start', help="start afs services")
    p.set_defaults(fn=afsutil.service.start, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('components', metavar='<name>', nargs='*',
                   help='values: server, client (default: all)',
                   default=afsutil.service.COMPONENTS)

    p = subparsers.add_parser('stop', help="stop afs services")
    p.set_defaults(fn=afsutil.service.stop, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('components', metavar='<name>', nargs='*',
                   help='values: server, client (default: all)',
                   default=afsutil.service.COMPONENTS)

    p = subparsers.add_parser('keytab', help='manage keytabs')
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('create', help="create a fake keytab")
    p.set_defaults(fn=afsutil.keytab.create, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--keytab', help='keytab file to be created (default: /tmp/afs.keytab)', default='/tmp/afs.keytab')
    p.add_argument('--cell', help='cell name (default: localcell)', default='localcell')
    p.add_argument('--realm', help='realm name (default: LOCALCELL)', default=None)
    p.add_argument('--enctype', help='encryption type (default: aes256-cts-hmac-sha1-96)', default='aes256-cts-hmac-sha1-96')
    p.add_argument('--secret', help='passphrase (default: random)', default=None)

    p = ssp.add_parser('destroy', help="destroy a keytab")
    p.set_defaults(fn=afsutil.keytab.destroy, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--keytab', help='keytab file to be destroyed (default: /tmp/afs.keytab)', default='/tmp/afs.keytab')
    p.add_argument('--force', help='ignore errors', action='store_true', default=False)

    p = ssp.add_parser('setkey', help='add a service key from a keytab file')
    p.set_defaults(fn=afsutil.keytab.setkey, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('--keytab', help="keytab file (default: /tmp/afs.keytab)", default="/tmp/afs.keytab")
    p.add_argument('--cell', help="cell name (default: detect)", default=None)
    p.add_argument('--realm', help="realm name (default: detect)", default=None)
    p.add_argument('--confdir', help="server config directory (default: /usr/afs/etc)", default="/usr/afs/etc")
    p.add_argument('--format', dest='kformat', help="key file format (default: detect)",
                   choices=['detect', 'transarc', 'rxkad-k5', 'extended'], default='detect')
    p.add_argument('-n', '--dry-run', dest='dryrun', help="do not make changes", default=False, action='store_true')

    p = subparsers.add_parser('newcell', help='setup a new cell')
    p.set_defaults(fn=afsutil.cell.newcell, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('--cell', help="cell name (default: localcell)", default='localcell')
    p.add_argument('--realm', help="realm name (default: detect)", default=None)
    p.add_argument('--admin', help="admin username (default: 'admin')", default='admin')
    p.add_argument('--db', nargs='+', help="cell database hosts (default: local hostname)", default=None)
    p.add_argument('--fs', nargs='+', help="cell fileserver hosts (default: local hostname)", default=None)
    p.add_argument('-o', '--options', nargs='+', help="command line args: <name>=<value>", action='append')
    # Hidden arguments; moved to mtroot.
    p.add_argument('--no-client', dest='noclient', help=argparse.SUPPRESS, action='store_true')
    p.add_argument('--akimpersonate', help=argparse.SUPPRESS, action='store_true')
    p.add_argument('--keytab', help=argparse.SUPPRESS, default="/tmp/afs.keytab")
    p.add_argument('--top', nargs='+', help=argparse.SUPPRESS, default=[])
    p.add_argument('--aklog', help=argparse.SUPPRESS, default=None)

    p = subparsers.add_parser('mtroot', help='mount root volumes in a new cell')
    p.set_defaults(fn=afsutil.cell.mtroot, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--cell', help="cell name (default: localcell)", default='localcell')
    p.add_argument('--realm', help="realm name (default: detect)", default=None)
    p.add_argument('--akimpersonate', help="print a ticket for admin user", action='store_true')
    p.add_argument('--keytab', help="keytab file (default: /tmp/afs.keytab)", default="/tmp/afs.keytab")
    p.add_argument('--admin', help="admin username (default: 'admin')", default='admin')
    p.add_argument('--fs', nargs='+', help="cell fileserver hosts (default: local hostname)", default=None)
    p.add_argument('--top', nargs='+', help="top level volumes (default: none)", default=[])
    p.add_argument('--aklog', help="path to aklog program (default: detect)", default=None)
    p.add_argument('--kinit', help="path to kinit program (default: detect)", default=None)
    p.add_argument('-o', '--options', nargs='+', help="command line args: <name>=<value>", action='append')

    p = subparsers.add_parser('addfs', help='add a new fileserver to the cell')
    p.set_defaults(fn=afsutil.cell.addfs, must_be_root=True)
    _add_common_arguments(p)
    p.add_argument('hostname', help="fileserver hostname")
    p.add_argument('--keytab', help="keytab file (default: /tmp/afs.keytab)", default="/tmp/afs.keytab")
    p.add_argument('-o', '--options', nargs='+', help="command line args; <name>=<value>", action='append')

    p = subparsers.add_parser('login', help='obtain token with a keytab')
    p.set_defaults(fn=afsutil.cell.login, must_be_root=False)
    _add_common_arguments(p)
    p.add_argument('--akimpersonate', help="print a ticket for the service key in the keytab", action='store_true')
    p.add_argument('--keytab', help="keytab file (default: /tmp/afs.keytab)", default="/tmp/afs.keytab")
    p.add_argument('--user', help="user name (default: admin)", default="admin")
    p.add_argument('--cell', help="cell name (default: detect with --akimpersonate)", default="localcell")
    p.add_argument('--realm', help="realm name (default: detect with --akimpersonate)", default="LOCALCELL")
    p.add_argument('--aklog', help="path to the aklog program (default: detect)", default=None)
    p.add_argument('--kinit', help="path to the kinit program (default: detect)", default=None)

    if argcomplete:
        argcomplete.autocomplete(parser)
    args = parser.parse_args()
    set_log_options(args)
    if args.must_be_root:
        if os.geteuid() != 0:
            sys.stderr.write("afsutil: Must run as root!\n")
            sys.exit(1)
    chdir = getattr(args, 'chdir', None)
    if chdir:
        logger.info("Changing to directory %s", chdir)
        cwd = os.getcwd()
        os.chdir(chdir)
    try:
        kwargs = vars(args)
        code = args.fn(**kwargs)
    except afsutil.system.CommandFailed as e:
        code = 1
        if args.log or args.verbose:
            logger.exception(e)
        sys.stderr.write("Command failed: %s, code %d\n" % (e.cmd, e.code))
        sys.stderr.write("output:\n")
        sys.stderr.write("%s\n" % (e.out))
    except Exception as e:
        code = 1
        if args.log or args.verbose:
            logger.exception(e)
        sys.stderr.write("%s\n" % (e))
    finally:
	if chdir:
            os.chdir(cwd)
    sys.exit(code)

if __name__ == "__main__":
    main()

