#!/usr/bin/env python
# Copyright (c) 2015-2016 Sine Nomine Associates
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED 'AS IS' AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import gettext
import os
import subprocess
import shlex
import sys

import afsrobot.config
import afsrobot.command
import afsrobot.ssh
import afsrobot.web
import afsrobot.runner

try:
    import argparse
except ImportError:
    sys.stderr.write("Cannot import argparse package.\n")
    sys.stderr.write("Install argparse with `sudo pip install argparse`.\n")
    sys.exit(1)

#
# Environment Variables
#
# AFS_ROBOTEST_ROOT  Path to the test and output directories.
#                    Defaults to the current working directory.
#                    Overridden by the path:root configuration value.
#
# AFS_ROBOTEST_CONF  Fully qualified filename of the configuration file.
#                    Defaults to ~/.afsrobotestrc/afs-robotest.conf
#                    Overridden by the --config (-c) command line option.
#
AFS_ROBOTEST_ROOT = os.getenv('AFS_ROBOTEST_ROOT', os.getcwd())
AFS_ROBOTEST_CONF = os.getenv('AFS_ROBOTEST_CONF',
                      os.path.join(
                        os.environ['HOME'], '.afsrobotestrc', 'afs-robotest.conf'))

#
# config sub-commands
#

def cmd_config_init(args, config):
    filename = args.config
    if os.path.exists(filename):
        if args.verbose:
            sys.stdout.write("Skipping config init; file %s already exists.\n" % (filename))
        return 0
    dirname = os.path.dirname(filename)
    if not os.path.exists(dirname):
        if args.verbose:
            sys.stdout.write("Making directory %s.\n" % (dirname))
        os.makedirs(dirname)
    config = afsrobot.config.Config()
    config.load_defaults()
    config.set_value('paths', 'root', args.root)
    if args.verbose:
        sys.stdout.write("Creating config file %s.\n" % (filename))
    config.save_as(filename)

def cmd_config_copy(args, config):
    if args.verbose:
        sys.stdout.write("Copying to file %s.\n" % (args.dest))
    new_config = afsrobot.config.Config()
    new_config.load_from_file(config.filename)
    new_config.save_as(args.dest)

def cmd_config_list(args, config):
    config.print_values(section=args.section, raw=args.raw)

def cmd_config_set(args, config):
    try:
        config.set_value(args.section, args.option, args.value)
        config.save()
    except Exception as e:
        sys.stderr.write("Unable to set: %s\n" % (e))
        return 1

def cmd_config_unset(args, config):
    try:
        config.unset_value(args.section, args.option)
        config.save()
    except Exception as e:
        sys.stderr.write("Unable to remove: %s\n" % (e))
        return 1


class CommandLineParser(argparse.ArgumentParser):
    """Subclass the argument parser to extend help messages."""
    def __init__(self, *args, **kwargs):
        argparse.ArgumentParser.__init__(self, *args, **kwargs)
    def error(self, message):
        """Display a full usage so all the sub-commands are shown."""
        self.print_help(sys.stderr)
        self.exit(2, gettext.gettext('\n%s: error: %s\n') % (self.prog, message))


def cmd_web_start(args, config):
    server = afsrobot.web.TinyWebServer(config)
    server.start()

def cmd_web_stop(args, config):
    server = afsrobot.web.TinyWebServer(config)
    server.stop()

def cmd_web_status(args, config):
    server = afsrobot.web.TinyWebServer(config)
    sys.stdout.write("%s\n" % (server.status()))

def cmd_ssh_create(args, config):
    rc = afsrobot.ssh.generate_key(args.keyfile)
    if rc == 0:
        config.set_value('ssh', 'keyfile', args.keyfile)
        config.save()
    return rc

def cmd_ssh_dist(args, config):
    keyfile = config.optstr('ssh', 'keyfile', required=True)
    hostnames = config.opthostnames()
    return afsrobot.ssh.distribute_key(keyfile, hostnames)

def cmd_ssh_check(args, config):
    keyfile = config.optstr('ssh', 'keyfile', required=True)
    hostnames = config.opthostnames()
    return afsrobot.ssh.check_access(keyfile, hostnames)

def cmd_ssh_exec(args, config):
    keyfile = config.optstr('ssh', 'keyfile', required=True)
    hostnames = config.opthostnames()
    return afsrobot.ssh.execute(keyfile, hostnames, args.command)


def defer_config(args):
    return None # Defer config creation.

def read_config(args):
    filename = args.config
    if not os.path.exists(filename):
        sys.stderr.write("Config file %s not found.\n" % (filename))
        sys.stderr.write("Please run 'afs-robotest config init' to create a new file\n")
        sys.stderr.write("or specify the path to an exising file with the --config option.\n")
        sys.exit(1)
    if args.verbose:
        sys.stdout.write("Loading config file %s.\n" % (filename))
    config = afsrobot.config.Config()
    config.load_from_file(filename)
    return config

def main():
    """Command line handling for the afs-robotest tool."""

    def common_options(p):
        p.add_argument('-c', '--config', metavar='<filename>',
                       help="config file (default: %s)" % AFS_ROBOTEST_CONF,
                       default=AFS_ROBOTEST_CONF)
        p.add_argument('-v', '--verbose', help="run verbosely", default=False, action='store_true')

    # This should be run as a normal user; sudo is called for installation as needed.
    if os.geteuid() == 0:
        sys.stderr.write("%s: Should not be run as root!\n" % (sys.argv[0]))
        sys.exit(1)

    # Parse command line options.
    parser = CommandLineParser()
    subparsers = parser.add_subparsers(title="commands", metavar="<command>")

    #
    # afs-robotest config
    #
    p = subparsers.add_parser('config', help="get or set configuration")
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('init', help="create a config file with default values")
    common_options(p)
    p.add_argument('--root', help="afs-rototest root directory (default: %s)" % (AFS_ROBOTEST_ROOT),
                   default=AFS_ROBOTEST_ROOT)
    p.set_defaults(_cmd=cmd_config_init, _cf=defer_config)

    p = ssp.add_parser('copy', help="copy configuration values to a new file")
    common_options(p)
    p.add_argument('dest', metavar='<tofile>', help="destination filename")
    p.set_defaults(_cmd=cmd_config_copy, _cf=read_config)

    p = ssp.add_parser('list', help="show configuration values")
    common_options(p)
    p.add_argument('-r', '--raw', action='store_true', help="do not expand interpolated values")
    p.add_argument('-s', '--section', help="config section")
    p.set_defaults(_cmd=cmd_config_list, _cf=read_config)

    p = ssp.add_parser('set', help="set a configuration value")
    common_options(p)
    p.add_argument('section', metavar='<section>', help="section name")
    p.add_argument('option', metavar='<option>', help="option name")
    p.add_argument('value', metavar='<value>', help="option value")
    p.set_defaults(_cmd=cmd_config_set, _cf=read_config)

    p = ssp.add_parser('unset', help="unset a configuration value")
    common_options(p)
    p.add_argument('section', metavar='<section>', help="section name")
    p.add_argument('option', metavar='<option>', help="option name")
    p.set_defaults(_cmd=cmd_config_unset, _cf=read_config)

    #
    # afs-robotest ssh
    #
    p = subparsers.add_parser('ssh', help="manage ssh keys and run commands")
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('create', help="generate a ssh key pair")
    common_options(p)
    keyfile = os.path.join(os.environ['HOME'], '.ssh', 'afs-robotest')
    p.add_argument('--keyfile', help="ssh keyfile name (default: %s)" % (keyfile), default=keyfile)
    p.add_argument('-t', dest='keytype', metavar='<type>', help="ssh key type (default: rsa)", default='rsa')
    p.set_defaults(_cmd=cmd_ssh_create, _cf=read_config)

    p = ssp.add_parser('dist', help="distribute the ssh public key to remote hosts")
    common_options(p)
    p.set_defaults(_cmd=cmd_ssh_dist)

    p = ssp.add_parser('check', help="check passwordless ssh access to remote hosts")
    common_options(p)
    p.set_defaults(_cmd=cmd_ssh_check, _cf=read_config)

    p = ssp.add_parser('exec', help="execute a command on each remote host")
    common_options(p)
    p.add_argument('-s', '--sudo', action='store_true', help="run remote command as root")
    p.add_argument('-q', '--quiet', action='store_true', help="do not print hostnames")
    p.add_argument('-x', '--exclude', metavar='<hosts>', help="hosts to exclude (comma separated)", default='')
    p.add_argument('command', help='command line')
    p.set_defaults(_cmd=cmd_ssh_exec, _cf=read_config)

    #
    # afs-robotest web
    #
    p = subparsers.add_parser('web', help="run the test report web server")
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('start', help="start web server")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_start, _cf=read_config)

    p = ssp.add_parser('stop', help="stop web server")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_stop)

    p = ssp.add_parser('status', help="show web server status")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_status, _cf=read_config)

    #
    # afs-robotest setup
    #
    p = subparsers.add_parser('setup', help='install and setup OpenAFS')
    common_options(p)
    p.add_argument('--force', action='store_true', help='overwrite existing files', default=None)
    p.set_defaults(_cmd=afsrobot.runner.run_setup, _cf=read_config)

    #
    # afs-robotest run
    #
    p = subparsers.add_parser('run', help="run the tests")
    common_options(p)
    p.add_argument('-s', '--suite', help="test suite to run (default: all)", default=None)
    p.add_argument('-i', '--include', help="test tags to include (default: all)", default=None)
    p.set_defaults(_cmd=afsrobot.runner.run_tests, _cf=read_config)

    #
    # afs-robotest login
    #
    p = subparsers.add_parser('login', help="obtain a token")
    common_options(p)
    p.add_argument('-u', '--user', help="user name (default: admin)", default=None)
    p.set_defaults(_cmd=afsrobot.runner.run_login, _cf=read_config)

    #
    # afs-robotest teardown
    #
    p = subparsers.add_parser('teardown', help="remove OpenAFS")
    common_options(p)
    p.set_defaults(_cmd=afsrobot.runner.run_teardown, _cf=read_config)

    args = parser.parse_args()
    config = args._cf(args)
    rc = args._cmd(args, config)
    return rc

if __name__ == "__main__":
    sys.exit(main())

