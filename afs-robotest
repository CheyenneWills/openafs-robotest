#!/usr/bin/env python
# Copyright (c) 2015 Sine Nomine Associates
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED 'AS IS' AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import atexit
import ConfigParser
import gettext
import logging
import os
import signal
import SimpleHTTPServer
import SocketServer
import StringIO
import subprocess
import sys
import time

# Try to give useful messages for non-standard package import errors.
try:
    import afsutil.transarc
    import afsutil.keytab
    import afsutil.init
    import afsutil.cell
    from afsutil.system import mkdirp,touch
except ImportError:
    sys.stderr.write("Cannot import afsutil packages.\n")
    sys.stderr.write("See README for installation instructions.\n");
    sys.exit(1)

try:
    import robot.run
except ImportError:
    sys.stderr.write("Cannot import robotframework packages.\n")
    sys.stderr.write("Install robotframework with `sudo pip install robotframework`.\n")
    sys.exit(1)

try:
    import argparse
except ImportError:
    sys.stderr.write("Cannot import argparse package.\n")
    sys.stderr.write("Install argparse with `sudo pip install argparse`.\n")
    sys.exit(1)

#
# Configuration defaults.
#
# The AFS_ROBOTEST_ROOT env var will be used to set the default
# root directory, otherwise the current working directory is
# used as the default project root.
#
try:
    DEFAULT_ROOT = os.environ['AFS_ROBOTEST_ROOT']
except KeyError:
    DEFAULT_ROOT = os.getcwd()

DEFAULT_CONFIG_FILE = os.path.join(DEFAULT_ROOT, 'afs-robotest.conf')
DEFAULT_CONFIG_DATA = """
[paths]
tests = %(root)s/tests
libraries = %(root)s/libraries
resources = %(root)s/resources
html = %(root)s/html
doc = %(root)s/html/doc
log = %(root)s/html/log
output = %(root)s/html/output
dist = %(root)s/html/dist

[setup]
installer = none
install_client = yes
install_server = yes
nuke = no
force = no

[run]
exclude_tags = todo,crash,slow
log_level = INFO
auto_setup = no
auto_teardown = no

[variables]
afs_dist = transarc

[teardown]
purge = yes

[cell]
name = robotest
user = robotest
admin = robotest.admin

[kerberos]
realm = ROBOTEST
keytab = /tmp/afs.keytab
akimpersonate = yes

[web]
port = 8000
foreground = no
pidfile = /tmp/afs-robotest-web.pid
"""

class SilentRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    """Handle requests without printing messages."""
    def log_message(self, format, *args):
        pass

class TinyWebServer(object):
    """Minimal web server to display test reports and logs.

    This optional helper is provided as a simple way to view the test
    reports and logs.  This only serves static content.
    """
    def __init__(self, config):
        self.port = config.getint('web', 'port')
        self.docroot = config.get('paths', 'html')
        self.pidfile = config.get('web', 'pidfile')
        self.foreground = config.getboolean('web', 'foreground')

    def _exit(self):
        """Clean up our pid file."""
        try:
            os.remove(self.pidfile)
        except:
            pass

    def _getpid(self):
        """Get the child process pid from the pid file."""
        pid = 0
        try:
            with open(self.pidfile) as f:
                pid = int(f.readline().strip())
        except:
            pass
        return pid

    def _daemonize(self):
        """Simplified daemonize to run the server in the background."""
        pid = os.fork()
        if pid < 0:
            raise AssertionError("Failed to fork!\n")
        if pid != 0:
            sys.exit(0) # Parent process
        # Child process
        os.setsid() # detach
        atexit.register(self._exit)
        with open(self.pidfile, "w") as f:
            f.write("%d\n" % os.getpid())

    def start(self):
        """Start the miminal web server."""
        pid = self._getpid()
        if pid:
            sys.stderr.write("Already running (pid %d).\n" % (pid))
            return
        mkdirp(self.docroot)
        os.chdir(self.docroot)
        sys.stdout.write("Listening on port %d.\n" % (self.port))
        if not self.foreground:
            self._daemonize()
        address = ('', self.port)
        Handler = SilentRequestHandler
        Handler.extensions_map['.log'] = 'text/plain'
        server = SocketServer.TCPServer(address, Handler)
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            pass
        sys.exit(0)

    def stop(self):
        """Stop the miminal web server."""
        if self.foreground:
            sys.stderr.write("Skipping stop; foreground mode.\n")
            return
        pid = self._getpid()
        if pid == 0:
            sys.stdout.write("Not running.\n")
        else:
            sys.stdout.write("Stopping process %d... " % (pid))
            sys.stdout.flush()
            os.kill(pid, signal.SIGINT)
            for _ in xrange(0,10):
                time.sleep(1)
                if self._getpid() == 0:
                    sys.stdout.write("ok.\n")
                    return
            sys.stdout.write("failed.\n")

    def status(self):
        """Get the status of the miminal web server."""
        if self.foreground:
            sys.stderr.write("Skipping status; foreground mode.\n")
            return ""
        pid = self._getpid()
        if pid:
            status = "Process %d listening on port %d." % (pid, self.port)
        else:
            status = "Not running."
        return status

def must_be_root(cmd):
    """Fails unless running as root."""
    if os.geteuid() != 0:
        sys.stderr.write("%s %s: Must run as root!\n" % (sys.argv[0], cmd))
        sys.exit(1)

def should_not_be_root(cmd):
    """Fails if running as root."""
    if os.geteuid() == 0:
        sys.stderr.write("%s %s: Should not be run as root!\n" % (sys.argv[0], cmd))
        sys.exit(1)

def cmd_config_list(args, config):
    """List the current configuration."""
    if args.expand:
        for s in config.sections():
            sys.stdout.write("[%s]\n" % s)
            for k,v in config.items(s):
                sys.stdout.write("%s = %s\n" % (k, v))
            sys.stdout.write("\n")
    else:
        config.write(sys.stdout)

def cmd_config_set(args, config):
    """Set a value in the config file.

    This will create the config file if it does not exist. Use --config to set
    the name of an alternate configuration file."""
    should_not_be_root('config set')
    if args.section not in config.sections():
        config.add_section(args.section)
    config.set(args.section, args.option, args.value)
    with open(args.config, 'w') as f:
        config.write(f)


def install_transarc_bins(config, keytab, force):
    """Install transarc-style binaries."""
    cell = config.get('cell', 'name')
    realm = config.get('kerberos', 'realm')
    components = []
    if config.getboolean('setup', 'install_server'):
        components.append('server')
    if config.getboolean('setup', 'install_client'):
        components.append('client')
    if config.has_option('variables', 'aklog'):
        afsutil.cli.AKLOG = config.get('variables', 'aklog')

    if len(components) == 0:
        sys.stdout.write("Skipping install; server and client install disabled.\n")
        return
    if not config.has_option('paths', 'dest'):
        sys.stderr.write("Cannot install; paths:dest is missing.\n")
        sys.exit(1)
    dest = config.get('paths', 'dest')
    if not os.path.exists(dest):
        sys.stderr.write("Cannot install; paths:dest='%s' not found.\n" % (dest))
        sys.exit(1)
    if force:
        force_msg = " (forced)"
    else:
        force_msg = ""
    sys.stdout.write("Installing transarc-style bins from '%s'%s... " % (dest,force_msg))
    sys.stdout.flush()
    installer = afsutil.transarc.TransarcInstaller(dest=dest, cell=cell, realm=realm, force=force)
    installer.install(components=components)
    if 'server' in components:
        keytab.set_service_key()
    sys.stdout.write("done.\n")

def remove_transarc_bins(purge):
    afsutil.init.stop(components=['server', 'client'])
    remover = afsutil.transarc.TransarcUninstaller(purge=purge)
    sys.stdout.write("Removing files... ")
    sys.stdout.flush()
    remover.remove()
    sys.stdout.write("done.\n")

def cmd_setup(args, config):
    """Run the pre-test installation and setup."""
    must_be_root('setup')

    log = os.path.join(config.get('paths', 'log'), 'setup.log')
    mkdirp(config.get('paths', 'log'))
    sys.stdout.write("Writing to log '%s'.\n" % (log))
    logging.basicConfig(level=logging.INFO, filename=log, format="%(asctime)s "+logging.BASIC_FORMAT)
    logging.getLogger('afs-robotest').info("afs-robotest setup")

    installer = config.get('setup', 'installer')

    # Options to cope with unclean systems. Use with care.
    if config.has_option('setup', 'nuke'):
        nuke = config.getboolean('setup', 'nuke')
    else:
        nuke = False
    if args.force is not None:
        force = args.force
    elif config.has_option('setup', 'force'):
        force = config.getboolean('setup', 'force')
    else:
        force = False

    # Create service key.
    cell = config.get('cell', 'name')
    admin = config.get('cell', 'admin')
    realm = config.get('kerberos', 'realm')
    keytab = config.get('kerberos', 'keytab')
    akimpersonate = config.get('kerberos', 'akimpersonate')

    kt = afsutil.keytab.Keytab()
    if not akimpersonate:
        kt.load(keytab)
    else:
        sys.stdout.write("Creating fake keytab '%s'... " % (keytab))
        sys.stdout.flush()
        kt.add_fake_key("afs/%s@%s" % (cell, realm))
        kt.write(keytab)
        sys.stdout.write("done.\n")

    # Installation.
    if installer == 'transarc':
        if nuke:
            remove_transarc_bins(True)
        install_transarc_bins(config, kt, force)
    elif installer == 'none':
        sys.stdout.write("Skipping installation; setup:installer is 'none'.\n")
    else:
        sys.stderr.write("Invalid installer name: '%s'.\n" % (installer))
        sys.exit(1)

    # Create the test cell.
    sys.stdout.write("Setting up test cell '%s'... " % (cell))
    sys.stdout.flush()
    afsutil.init.start(components=['server'])
    c = afsutil.cell.Cell(cell=cell, realm=realm, keytab=keytab, admin=admin)
    c.newcell()
    sys.stdout.write("done.\n")

    sys.stdout.write("Starting afs client... ")
    sys.stdout.flush()
    afsutil.init.start(components=['client'])
    sys.stdout.write("done.\n")

    sys.stdout.write("Setting root volumes for test cell '%s'... " % (cell))
    if akimpersonate:
        kt.akimpersonate(user=admin, cell=cell, realm=realm)
    else:
        raise AssertionError("sorry, not implemented")
    c.mount_root_volumes()
    c.create_top_volumes(['test'])
    sys.stdout.write("done.\n")

def cmd_run(args, config):
    """Run the Robotframework test suites."""
    should_not_be_root('run')
    if config.getboolean('run', 'auto_setup'):
        sys.stdout.write("Running setup...\n")
        rc = subprocess.call(['sudo', '-n', sys.argv[0], 'setup', '--config', args.config])
        if rc != 0:
            sys.stderr.write("Not running tests: setup failed!\n")
            sys.exit(1)

    # Setup the python paths for our libs and resources.
    sys.path.append(os.path.join(config.get('paths', 'libraries'), 'OpenAFSLibrary'))
    sys.path.append(config.get('paths', 'resources'))

    # Create output dir if needed.
    output = config.get('paths', 'output')
    mkdirp(output)

    # Verify we have a keytab.
    if not os.path.isfile(config.get('kerberos', 'keytab')):
        sys.stderr.write("Cannot find keytab file '%s'!\n" % (config.get('kerberos', 'keytab')))
        sys.exit(1)

    # Setup the rf options.
    tests = config.get('paths', 'tests') # path to our tests
    options = {
        'variable': [
            'RESOURCES:%s' % config.get('paths', 'resources'), # path to our resources
            'AFS_CELL:%s' % config.get('cell', 'name'),
            'AFS_ADMIN:%s' % config.get('cell', 'admin'),
            'AFS_AKIMPERSONATE:%s' % config.getboolean('kerberos', 'akimpersonate'),
            'KRB_REALM:%s' % config.get('kerberos', 'realm'),
            'KRB_AFS_KEYTAB:%s' % config.get('kerberos', 'keytab'),
        ],
        'report': 'index.html',
        'outputdir': output,
        'loglevel': config.get('run', 'log_level'),
        'exclude': config.get('run', 'exclude_tags').split(','),
        'runemptysuite': True,
        'exitonfailure': False,
    }

    # Additional variables.
    if config.has_section('variables'):
        for o,v in config.items('variables'):
            options['variable'].append("%s:%s" % (o.upper(), v))

    # Additional options.
    if args.suite:
        options['suite'] = args.suite

    rc = robot.run(tests, **options)

    if rc == 0 and config.getboolean('run', 'auto_teardown'):
        cmd = ['sudo', '-n', sys.argv[0], 'teardown', '--config', args.config]
        sys.stdout.write("Running teardown...\n")
        rc = subprocess.call(cmd)

    return rc

def cmd_teardown(args, config):
    """Perform the post-test uninstall and cleanup."""
    must_be_root('teardown')

    log = os.path.join(config.get('paths', 'log'), 'teardown.log')
    mkdirp(config.get('paths', 'log'))
    sys.stdout.write("Writing to log '%s'.\n" % (log))
    logging.basicConfig(level=logging.INFO, filename=log, format="%(asctime)s "+logging.BASIC_FORMAT)
    logging.getLogger('afs-robotest').info("afs-robotest teardown")

    purge = config.getboolean('teardown', 'purge')
    remove_transarc_bins(purge)
    return 0

def cmd_web_start(args, config):
    should_not_be_root('web')
    server = TinyWebServer(config)
    server.start()

def cmd_web_stop(args, config):
    should_not_be_root('web')
    server = TinyWebServer(config)
    server.stop()

def cmd_web_status(args, config):
    should_not_be_root('web')
    server = TinyWebServer(config)
    sys.stdout.write("%s\n" % (server.status()))


class CommandLineParser(argparse.ArgumentParser):
    """Subclass the argument parser to extend help messages."""
    def __init__(self, *args, **kwargs):
        argparse.ArgumentParser.__init__(self, *args, **kwargs)
    def error(self, message):
        """Display a full usage so all the sub-commands are shown."""
        self.print_help(sys.stderr)
        self.exit(2, gettext.gettext('\n%s: error: %s\n') % (self.prog, message))


def common_options(p):
    p.add_argument('-c', '--config', help="config file", default=DEFAULT_CONFIG_FILE)

def main():

    # Parse command line options.
    parser = CommandLineParser()
    subparsers = parser.add_subparsers(title="commands", metavar="<command>")

    #
    # afs-robotest config <list|set>
    #
    p = subparsers.add_parser('config', help="get or set configuration")
    ssp = p.add_subparsers(title="actions", metavar="<action>")
    p = ssp.add_parser('list', help="show configuration values")
    common_options(p)
    p.add_argument('-x', '--expand', action='store_true', help="expand interpolated values")
    p.set_defaults(_cmd=cmd_config_list)

    p = ssp.add_parser('set', help="set a configuration value")
    common_options(p)
    p.add_argument('section', metavar='<section>', help="section name")
    p.add_argument('option', metavar='<option>', help="option name")
    p.add_argument('value', metavar='<value>', help="option value")
    p.set_defaults(_cmd=cmd_config_set)

    #
    # afs-robotest web <start|stop|status>
    #
    p = subparsers.add_parser('web', help="run the test report web server")
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('start', help="start web server")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_start)

    p = ssp.add_parser('stop', help="stop web server")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_stop)

    p = ssp.add_parser('status', help="show web server status")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_status)

    #
    # afs-robotest setup
    #
    p = subparsers.add_parser('setup', help='install and setup OpenAFS')
    common_options(p)
    p.add_argument('--force', action='store_true', help='overwrite existing files', default=None)
    p.set_defaults(_cmd=cmd_setup)

    #
    # afs-robotest run
    #
    p = subparsers.add_parser('run', help="run the tests")
    common_options(p)
    p.add_argument('-s', '--suite', help="test suite to run (default: all)", default=None)
    p.set_defaults(_cmd=cmd_run)

    #
    # afs-robotest teardown
    #
    p = subparsers.add_parser('teardown', help="remove OpenAFS")
    common_options(p)
    p.set_defaults(_cmd=cmd_teardown)

    args = parser.parse_args()

    # Load configuration.
    # First load defaults then overlay with user defined values.
    config = ConfigParser.SafeConfigParser()
    config.add_section('paths')
    config.set('paths', 'root', DEFAULT_ROOT)
    config.readfp(StringIO.StringIO(DEFAULT_CONFIG_DATA))
    ok = config.read(args.config)
    if not ok and args.config != DEFAULT_CONFIG_FILE:
        sys.stderr.write("Could not read config file '%s'.\n" % (args.config))
        sys.exit(1)

    rc = args._cmd(args, config)
    sys.exit(rc)

if __name__ == "__main__":
    sys.exit(main())
