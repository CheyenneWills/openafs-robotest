#!/usr/bin/env python
# Copyright (c) 2015-2016 Sine Nomine Associates
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED 'AS IS' AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import atexit
import ConfigParser
import gettext
import logging
import os
import signal
import SimpleHTTPServer
import socket
import SocketServer
import StringIO
import subprocess
import sys
import time

try:
    import robot.run
except ImportError:
    sys.stderr.write("Cannot import robotframework packages.\n")
    sys.stderr.write("Install robotframework with `sudo pip install robotframework`.\n")
    sys.exit(1)

try:
    import argparse
except ImportError:
    sys.stderr.write("Cannot import argparse package.\n")
    sys.stderr.write("Install argparse with `sudo pip install argparse`.\n")
    sys.exit(1)

def mkdirp(path):
    """Make a directory with parents.
    Do not raise an execption if the directory already exists."""
    if not os.path.isdir(path):
        os.makedirs(path)

#
# Configuration defaults.
#
# The AFS_ROBOTEST_ROOT env var will be used to set the default
# root directory, otherwise the current working directory is
# used as the default project root.
#
try:
    DEFAULT_ROOT = os.environ['AFS_ROBOTEST_ROOT']
except KeyError:
    DEFAULT_ROOT = os.getcwd()

DEFAULT_SSH_KEYFILE = os.path.join(os.environ['HOME'], '.ssh', 'afs-robotest')
DEFAULT_CONFIG_FILE = os.path.join(DEFAULT_ROOT, 'afs-robotest.conf')
DEFAULT_CONFIG_DATA = """
[paths]
tests = %(root)s/tests
libraries = %(root)s/libraries
resources = %(root)s/resources
html = %(root)s/html
doc = %(root)s/html/doc
log = %(root)s/html/log
output = %(root)s/html/output
dist = %(root)s/html/dist

[run]
exclude_tags = todo,crash,slow
log_level = INFO
auto_setup = no
auto_teardown = no

[variables]
afs_dist = transarc

[cell]
name = robotest
user = robotest
admin = robotest.admin
secret = xyzzy

[kerberos]
realm = ROBOTEST
keytab = /tmp/afs.keytab
akimpersonate = yes

[web]
port = 8000
foreground = no
pidfile = /tmp/afs-robotest-web.pid

[host:localhost]
installer = transarc
isfileserver = yes
isdbserver = yes
isclient = yes
setclock = no
nuke = no
dest = xxx
build = no
builddir = xxx

"""

class Config(ConfigParser.SafeConfigParser):
    """Config parser wrapper."""

    def __init__(self, filename):
        """Initalize the configuration.

        Create a default configuration, then overwrite with
        the user's configuration, if any.
        """
        ConfigParser.SafeConfigParser.__init__(self)
        self.add_section('paths')
        self.set('paths', 'root', DEFAULT_ROOT)
        self.add_section('ssh')
        self.set('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
        self.readfp(StringIO.StringIO(DEFAULT_CONFIG_DATA))

        # Read the user supplied filename if given, otherwise, read the default
        # file if present.
        if filename is not None:
            if not os.access(filename, os.F_OK):
                raise AssertionError("Cannot find config file %s." % (filename))
            self.filename = filename
        else:
            if os.access(DEFAULT_CONFIG_FILE, os.F_OK):
                self.filename = DEFAULT_CONFIG_FILE
            else:
                self.filename = None  # just use built-in defaults.

        if self.filename:
            ok = self.read(self.filename)
            if self.filename not in ok:
                raise AssertionError("Failed to read config file %s." % (self.filename))

    def optstr(self, section, name, default=None):
        """Helper to lookup a configuration string option."""
        if self.has_option(section, name):
            value = self.get(section, name)
        else:
            value = default
        return value

    def optbool(self, section, name, default=False):
        """Helper to lookup a configuration boolean option."""
        if self.has_option(section, name):
            value = self.getboolean(section, name)
        else:
            value = default
        return value

    def opthostnames(self, filter=None, lookupname=False):
        """Return a list of host sections."""
        hostnames = []
        for s in self.sections():
            if not s.startswith('host:'):
                continue
            hostname = s.replace('host:', '')
            if hostname == '':
                sys.stderr.write("Invalid config section name: %s\n" % (s))
                sys.exit(1)
            if filter is not None and not self.optbool(s, filter):
                continue
            if hostname == 'localhost' and lookupname:
                hostname = socket.gethostname()
            hostnames.append(hostname)
        return hostnames

    def optfakekey(self):
        """Command line options for afsutil fakekey."""
        cell = self.optstr('cell', 'name')
        keytab = self.optstr('kerberos', 'keytab')
        realm = self.optstr('kerberos', 'realm')
        enctype = self.optstr('kerberos', 'enctype')
        secret = self.optstr('cell', 'secret')
        args = []
        if cell:
            args.append('--cell')
            args.append(cell)
        if keytab:
            args.append('--keytab')
            args.append(keytab)
        if realm:
            args.append('--realm')
            args.append(realm)
        if enctype:
            args.append('--enctype')
            args.append(enctype)
        if secret:
            args.append('--secret')
            args.append(secret)
        return args

    def optlogin(self):
        """Command line options for afsutil login."""
        user = self.optstr('cell', 'admin', 'admin')
        cell = self.optstr('cell', 'name')
        realm = self.optstr('kerberos', 'realm')
        aklog = self.optstr('variables', 'aklog')
        args = []
        if user:
            args.append('--user')
            args.append(user)
        if cell:
            args.append('--cell')
            args.append(cell)
        if realm:
            args.append('--realm')
            args.append(realm)
        if aklog:
            args.append('--aklog')
            args.append(aklog)
        if self.optbool('kerberos', 'akimpersonate'):
            args.append('--akimpersonate')
            keytab = self.optstr('kerberos', 'keytab')
            if keytab:
                args.append('--keytab')
                args.append(keytab)
        else:
            keytab = self.optstr('kerberos', 'user_keytab')
            if keytab:
                args.append('--keytab')
                args.append(keytab)
        return args

    def optcomponents(self, hostname):
        """List of components for install, start, and stop for this host.."""
        section = "host:%s" % (hostname)
        comp = []
        if self.optbool(section, 'isfileserver') or self.optbool(section, 'isdbserver'):
            comp.append('server')
        if self.optbool(section, 'isclient'):
            comp.append('client')
        return comp

    def optinstall(self, hostname):
        """Command line options for afsutil install."""
        section = "host:%s" % (hostname)
        hosts = self.opthostnames(filter='isdbserver', lookupname=True)
        args = []
        comp = self.optcomponents(hostname)
        if comp:
            args.append('--components')
            args += comp
        dest = self.optstr(section, 'dest')
        if dest:
            args.append('--dest')
            args.append(dest)
        cell = self.optstr('cell', 'name')
        if cell:
            args.append('--cell')
            args.append(cell)
        if hosts:
            args.append('--hosts')
            args += hosts
        keytab = self.optstr('kerberos', 'keytab')
        if keytab:
            args.append('--keytab')
            args.append(keytab)
        realm = self.optstr('kerberos', 'realm')
        if realm:
            args.append('--realm')
            args.append(realm)
        csdb = self.optstr(section, 'csdb')
        if csdb:
            args.append('--csdb')
            args.append(csdb)
        if self.optbool(section, 'force'):
            args.append('--force')
        return args

    def optnewcell(self):
        """Command line options for afsutil newcell."""
        fs = self.opthostnames(filter='isfileserver', lookupname=True)
        db = self.opthostnames(filter='isdbserver', lookupname=True)
        aklog = self.optstr('variables', 'aklog')
        args = [
            '--cell', self.optstr('cell', 'name', 'localcell'),
            '--admin', self.optstr('cell', 'admin', 'admin'),
            '--keytab', self.optstr('kerberos', 'keytab', '/tmp/afs.keytab'),
            '--top', 'test',
        ]
        if fs:
            args.append('--fs')
            args += fs
        if db:
            args.append('--db')
            args += db
        if aklog:
            args.append('--aklog')
            args.append(aklog)
        return args


class CommandLineParser(argparse.ArgumentParser):
    """Subclass the argument parser to extend help messages."""
    def __init__(self, *args, **kwargs):
        argparse.ArgumentParser.__init__(self, *args, **kwargs)
    def error(self, message):
        """Display a full usage so all the sub-commands are shown."""
        self.print_help(sys.stderr)
        self.exit(2, gettext.gettext('\n%s: error: %s\n') % (self.prog, message))


class Command(object):
    """Run commands locally or remotely, with or without sudo.

    This helper class runs afsutil commands locally when the hostname is
    'localhost', otherwise uses ssh to run the command on the remote
    host. The output is sent to the log file.
    """

    def __init__(self, hostname, keyfile, logfile=None, listener=None):
        self.hostname = hostname
        self.keyfile = keyfile
        self.logfile = logfile
        self.listener = listener

    def _exec(self, args): # args is a list here
        """Run the process and print the stdout and stderr to a log file."""
        if self.hostname != 'localhost':
            command = subprocess.list2cmdline(args)
            args = [
                'ssh', '-q', '-t', '-o', 'PasswordAuthentication no',
                '-i', self.keyfile, self.hostname, command
            ]
        cmdline = subprocess.list2cmdline(args)
        if self.logfile is None:
            #sys.stdout.writelines(["Running:", " ", cmdline, "\n"])
            code = subprocess.call(args)
        else:
            with open(self.logfile, 'a') as log:
                log.writelines(["localhost", " ", "INFO", " ", cmdline, "\n"])
                p = subprocess.Popen(args, bufsize=1, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                with p.stdout:
                    for line in iter(p.stdout.readline, ''):
                        line = line.rstrip()
                        log.writelines([self.hostname, " ", line, "\n"])
                        log.flush()
                        if self.listener:
                            self.listener(self.hostname, line)
                code = p.wait()
        return code

    def sh(self, command, *args):
        """Run the command."""
        return self._exec([command] + list(args))

    def sudo(self, command, *args):
        """Run the command as sudo."""
        return self._exec(['sudo', '-n', command] + list(args))

    def afsutil(self, command, *args):
        """Run the afsutil command on hostname as root."""
        return self._exec(['sudo', '-n', 'afsutil', command] + list(args))


class SilentRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    """Handle requests without printing messages."""
    def log_message(self, format, *args):
        pass

class TinyWebServer(object):
    """Minimal web server to display test reports and logs.

    This optional helper is provided as a simple way to view the test
    reports and logs.  This only serves static content.
    """
    def __init__(self, config):
        self.port = config.getint('web', 'port')
        self.docroot = config.get('paths', 'html')
        self.pidfile = config.get('web', 'pidfile')
        self.foreground = config.getboolean('web', 'foreground')

    def _exit(self):
        """Clean up our pid file."""
        try:
            os.remove(self.pidfile)
        except:
            pass

    def _getpid(self):
        """Get the child process pid from the pid file."""
        pid = 0
        try:
            with open(self.pidfile) as f:
                pid = int(f.readline().strip())
        except:
            pass
        return pid

    def _daemonize(self):
        """Simplified daemonize to run the server in the background."""
        pid = os.fork()
        if pid < 0:
            raise AssertionError("Failed to fork!\n")
        if pid != 0:
            sys.exit(0) # Parent process
        # Child process
        os.setsid() # detach
        atexit.register(self._exit)
        with open(self.pidfile, "w") as f:
            f.write("%d\n" % os.getpid())

    def start(self):
        """Start the miminal web server."""
        pid = self._getpid()
        if pid:
            sys.stderr.write("Already running (pid %d).\n" % (pid))
            return
        mkdirp(self.docroot)
        os.chdir(self.docroot)
        sys.stdout.write("Listening on port %d.\n" % (self.port))
        if not self.foreground:
            self._daemonize()
        address = ('', self.port)
        Handler = SilentRequestHandler
        Handler.extensions_map['.log'] = 'text/plain'
        server = SocketServer.TCPServer(address, Handler)
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            pass
        sys.exit(0)

    def stop(self):
        """Stop the miminal web server."""
        if self.foreground:
            sys.stderr.write("Skipping stop; foreground mode.\n")
            return
        pid = self._getpid()
        if pid == 0:
            sys.stdout.write("Not running.\n")
        else:
            sys.stdout.write("Stopping process %d... " % (pid))
            sys.stdout.flush()
            os.kill(pid, signal.SIGINT)
            for _ in xrange(0,10):
                time.sleep(1)
                if self._getpid() == 0:
                    sys.stdout.write("ok.\n")
                    return
            sys.stdout.write("failed.\n")

    def status(self):
        """Get the status of the miminal web server."""
        if self.foreground:
            sys.stderr.write("Skipping status; foreground mode.\n")
            return ""
        pid = self._getpid()
        if pid:
            status = "Process %d listening on port %d." % (pid, self.port)
        else:
            status = "Not running."
        return status

def must_be_root(cmd):
    """Fails unless running as root."""
    if os.geteuid() != 0:
        sys.stderr.write("%s %s: Must run as root!\n" % (sys.argv[0], cmd))
        sys.exit(1)

def should_not_be_root(cmd):
    """Fails if running as root."""
    if os.geteuid() == 0:
        sys.stderr.write("%s %s: Should not be run as root!\n" % (sys.argv[0], cmd))
        sys.exit(1)

def cmd_config_init(args, config):
    """Create the initial config file."""
    filename = args.newconfig
    if filename is None:
        filename = config.filename
    if filename is None:
        filename = DEFAULT_CONFIG_FILE
    if not os.access(filename, os.F_OK):
        with open(filename, "w") as f:
            config.write(f)

def cmd_config_list(args, config):
    """List the current configuration."""
    def print_section(s):
        sys.stdout.write("[%s]\n" % s)
        for k,v in config.items(s):
            sys.stdout.write("%s = %s\n" % (k, v))
        sys.stdout.write("\n")

    if args.section:
        if not config.has_section(args.section):
            sys.stderr.write("Section not found: %s\n" % (args.section))
            return 1
        print_section(args.section)
    elif args.expand:
        for s in config.sections():
            print_section(s)
    else:
        config.write(sys.stdout)

def cmd_config_set(args, config):
    """Set a value in the config file.

    This will create the config file if it does not exist. Use --newconfig to set
    the name of an alternate configuration file to write."""
    if args.section not in config.sections():
        config.add_section(args.section)
    config.set(args.section, args.option, args.value)
    filename = args.newconfig
    if filename is None:
        filename = config.filename
    if filename is None:
        filename = DEFAULT_CONFIG_FILE
    with open(filename, 'w') as f:
        config.write(f)

def cmd_setup(args, config):
    """Setup OpenAFS client and servers and create a test cell."""
    keyfile = config.optstr('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
    logfile = os.path.join(config.optstr('paths', 'log', '.'), "setup.log")
    mkdirp(os.path.dirname(logfile))
    if os.path.exists(logfile):
        os.remove(logfile)

    def log(msg):
        with open(logfile, 'a') as f:
            f.writelines(["localhost", " ", "INFO", " ", msg, "\n"])

    sys.stdout.write("Running setup.\n")
    log("==== SETUP ====")

    # Set system clock. (Also checks ssh access.)
    for hostname in config.opthostnames():
        cmd = Command(hostname, keyfile, logfile=logfile)
        section = "host:%s" % (hostname)
        if config.optbool(section, 'setclock'):
            if cmd.sudo('ntpdate', 'pool.ntp.org') != 0:
                sys.stdout.write("Failed to set clock on %s.\n" % (hostname))
                return 1

    # Build bins.
    for hostname in config.opthostnames():
        cmd = Command(hostname, keyfile, logfile=logfile)
        section = "host:%s" % (hostname)
        if config.optbool(section, 'build'):
            sys.stdout.write("Building on %s... " % (hostname))
            sys.stdout.flush()
            builddir = config.optstr(section, 'builddir')
            if cmd.sh('afsutil', 'build', '--chdir', builddir) != 0:
                sys.stdout.write("Failed to build; see %s\n" % (logfile))
                return 1
            sys.stdout.write("ok\n")

    # Install
    for hostname in config.opthostnames():
        cmd = Command(hostname, keyfile, logfile=logfile)
        section = "host:%s" % (hostname)
        installer = config.optstr(section, 'installer', default='none')
        if installer == 'transarc':
            sys.stdout.write("Installing on %s... " % (hostname))
            sys.stdout.flush()
            if config.optbool(section, 'nuke'):
                cmd.afsutil('stop')
                cmd.afsutil('remove', '--purge')
            if config.optbool('kerberos', 'akimpersonate'):
                if cmd.afsutil('fakekey', *config.optfakekey()) != 0:
                    sys.stdout.write("Failed to create fake service key; see %s\n" % (logfile))
                    return 1
            if cmd.afsutil('install', *config.optinstall(hostname)) != 0:
                sys.stdout.write("Failed to install; see %s\n" % (logfile))
                return 1
            sys.stdout.write("ok\n")
        elif installer == 'none':
            log("Skipping install on hostname %s; installer is 'none'." % (hostname))
        else:
            log("Invalid installer option for hostname %s!; installer='%s'." % (hostname, installer))
            return 1

    # Start clients and servers.
    for hostname in config.opthostnames():
        cmd = Command(hostname, keyfile, logfile=logfile)
        section = "host:%s" % (hostname)
        if config.optbool(section, "isfileserver") or config.optbool(section, "isdbserver"):
            sys.stdout.write("Starting servers on %s... " % (hostname))
            sys.stdout.flush()
            if cmd.afsutil('start', 'server') != 0:
                sys.stdout.write("Failed to start servers; see %s\n" % (logfile))
                return 1
            sys.stdout.write("ok\n")
        if config.optbool(section, "isclient") and config.optbool(section, 'afsdb_dynroot', default=True):
            sys.stdout.write("Starting client on %s... " % (hostname))
            sys.stdout.flush()
            if cmd.afsutil('start', 'client') != 0:
                sys.stdout.write("Failed to start client; see %s\n" % (logfile))
                return 1
            sys.stdout.write("ok\n")

    # Create the new cell.
    def report_progress(host, text):
        sys.stdout.writelines(["> ", text, "\n"])
    if len(config.opthostnames()) > 1:
        # Automatic show the log when setting up multiple systems. It takes
        # too long, and too much can (and probably will) go wrong.
        listener = report_progress
    else:
        listener = None
    cmd = Command('localhost', keyfile, logfile=logfile, listener=listener)
    sys.stdout.write("Setting up new cell on %s... " % (",".join(config.opthostnames()),))
    if listener:
        sys.stdout.write("\n")
    sys.stdout.flush()
    if cmd.afsutil('newcell', *config.optnewcell()) != 0:
        sys.stdout.write("Failed to setup cell; see %s\n" % (logfile))
        return 1
    sys.stdout.write("ok\n")

    # Now that the root volumes are ready, start any non-dynroot clients.
    for hostname in config.opthostnames():
        cmd = Command(hostname, keyfile, logfile=logfile)
        section = "host:%s" % (hostname)
        if config.optbool(section, "isclient") and not config.optbool(section, 'afsdb_dynroot', default=True):
            sys.stdout.write("Starting non-dynroot client on %s... " % (hostname))
            sys.stdout.flush()
            if cmd.afsutil('start', 'client') != 0:
                sys.stdout.write("Failed to start client; see %s\n" % (logfile))
                return 1
            sys.stdout.write("ok\n")

    return 0

def cmd_login(args, config):
    keyfile = config.optstr('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
    args = config.optlogin()
    cmd = Command('localhost', keyfile)
    rc = cmd.sh('afsutil', 'login', *args)
    if rc != 0:
        sys.stdout.write("Failed to login.\n")

def cmd_teardown(args, config):
    keyfile = config.optstr('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
    logfile = os.path.join(config.optstr('paths', 'log', '.'), "teardown.log")
    mkdirp(os.path.dirname(logfile))
    if os.path.exists(logfile):
        os.remove(logfile)

    def log(msg):
        with open(logfile, 'a') as f:
            f.writelines(["localhost", " ", "INFO", " ", msg, "\n"])

    sys.stdout.write("Running teardown.\n")
    log("==== TEARDOWN ====")

    for hostname in config.opthostnames():
        section = "host:%s" % (hostname)
        cmd = Command(hostname, keyfile, logfile=logfile)
        installer = config.optstr(section, 'installer', default='none')
        if installer == 'transarc':
            sys.stdout.write("Removing clients and servers on %s... " % (hostname))
            sys.stdout.flush()
            if cmd.afsutil('stop', *config.optcomponents(hostname)) != 0:
                sys.stdout.write("Failed to stop; see %s\n" % (logfile))
                return 1
            if cmd.afsutil('remove', '--purge') != 0:
                sys.stdout.write("Failed to remove; see %s\n" % (logfile))
                return 1
            sys.stdout.write("ok\n")
        elif installer == 'none':
            log("Skipping remove on hostname %s; installer is 'none'." % (hostname))
        else:
            log("Invalid installer option for hostname %s!; installer='%s'.\n" % (hostname, installer))

    return 0

def cmd_run(args, config):
    """Run the Robotframework test suites."""

    # Setup the python paths for our libs and resources.
    sys.path.append(os.path.join(config.get('paths', 'libraries'), 'OpenAFSLibrary'))
    sys.path.append(config.get('paths', 'resources'))

    # Create output dir if needed.
    output = config.optstr('paths', 'output', os.path.join(DEFAULT_ROOT, "output"))
    mkdirp(output)

    # Verify we have a keytab.
    if not os.path.isfile(config.get('kerberos', 'keytab')):
        sys.stderr.write("Cannot find keytab file '%s'!\n" % (config.get('kerberos', 'keytab')))
        sys.exit(1)

    # Setup the rf options.
    tests = config.get('paths', 'tests') # path to our tests
    options = {
        'variable': [
            'RESOURCES:%s' % config.get('paths', 'resources'), # path to our resources
            'AFS_CELL:%s' % config.get('cell', 'name'),
            'AFS_ADMIN:%s' % config.get('cell', 'admin'),
            'AFS_AKIMPERSONATE:%s' % config.getboolean('kerberos', 'akimpersonate'),
            'KRB_REALM:%s' % config.get('kerberos', 'realm'),
            'KRB_AFS_KEYTAB:%s' % config.get('kerberos', 'keytab'),
        ],
        'report': 'index.html',
        'outputdir': output,
        'loglevel': config.get('run', 'log_level'),
        'exclude': config.get('run', 'exclude_tags').split(','),
        'runemptysuite': True,
        'exitonfailure': False,
    }

    # Additional variables.
    if config.has_section('variables'):
        for o,v in config.items('variables'):
            options['variable'].append("%s:%s" % (o.upper(), v))

    # Additional options.
    if args.suite:
        options['suite'] = args.suite

    # Optionally, run the system setup.
    if config.optbool('run', 'auto_setup'):
        code = cmd_setup(args, config)
        if code != 0:
            sys.stderr.write("Not running tests: setup failed!\n")
            return code

    # Run the RF tests.
    sys.stdout.write("Running tests.\n")
    code = robot.run(tests, **options)
    if code != 0:
        sys.stderr.write("Tests failed.\n")
        return code

    # Optionally, run the system teardown.
    if config.optbool('run', 'auto_teardown'):
        code = cmd_teardown(args, config)
    return code

def cmd_web_start(args, config):
    server = TinyWebServer(config)
    server.start()

def cmd_web_stop(args, config):
    server = TinyWebServer(config)
    server.stop()

def cmd_web_status(args, config):
    server = TinyWebServer(config)
    sys.stdout.write("%s\n" % (server.status()))

def cmd_sshkeys_create(args, config):
    """Helper to create ssh key files with ssh-keygen."""
    keyfile = config.optstr('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
    if os.access(keyfile, os.F_OK):
        # No not clobber the existing key file. (It can confuse the
        # ssh-agent.)
        sys.stderr.write("Key file %s already exists.\n" % (keyfile))
        return 1
    sys.stdout.write("Creating ssh key file %s.\n" % (keyfile))
    cmd = ['ssh-keygen', '-t', args.keytype, '-f', keyfile]
    code = subprocess.call(cmd)
    if code != 0:
        sys.stderr.write("ssh-keygen failed; exit code %d\n" % (code))
    return code

def cmd_sshkeys_dist(args, config):
    """Copy the public key files to the configured hosts

    The key file should have been prevously created with ssh-keygen."""
    keyfile = config.optstr('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
    if not os.access(keyfile, os.F_OK):
        sys.stderr.write("Cannot access keyfile %s.\n" % (keyfile))
        return 1
    for hostname in config.opthostnames():
        if hostname == 'localhost':
            continue
        # Unfortunately ssh-copy-id will create a duplicate key in the authorized_keys
        # file if the key is already present. To keep this simple, for now, just
        # let it make the duplicates (these are test systems anyway).
        cmd = ['ssh-copy-id', '-i', keyfile, hostname]
        sys.stdout.write("Installing public key on %s...\n" % (hostname))
        code = subprocess.call(cmd)
        if code != 0:
            sys.stderr.write("Failed to copy ssh identity to host %s; exit code %d.\n" % (hostname, code))
            return code
    return cmd_sshkeys_check(args, config)

def cmd_sshkeys_check(args, config):
    """Check ssh access."""

    def ssh(hostname, args, keyfile=None, sudo=False):
        """Helper to run command on remote hosts using ssh."""
        if sudo:
            args.insert(0, "-n")  # requires NOPASSWD in sudoers
            args.insert(0, "sudo")
        command = subprocess.list2cmdline(args)
        if keyfile:  # passwordless
            args = ['ssh', '-q', '-t', '-i', keyfile, '-o', 'PasswordAuthentication no', hostname, command]
        else:
            args = ['ssh', '-q', hostname, command]
        return subprocess.call(args)

    keyfile = config.optstr('ssh', 'keyfile', DEFAULT_SSH_KEYFILE)
    if not os.access(keyfile, os.F_OK):
        sys.stderr.write("Cannot access keyfile %s.\n" % (keyfile))
        return 1
    sys.stdout.write("Checking ssh access...\n")
    failed = False
    for hostname in config.opthostnames():
        if hostname == 'localhost':
            continue
        sys.stdout.write("Checking access to host %s...\n" % (hostname))
        code = ssh(hostname, ['uname', '-a'], keyfile=keyfile, sudo=False)
        if code != 0:
            sys.stderr.write("Failed to ssh to host %s.\n" % (hostname))
            failed = True
            continue
        installer = config.optstr('host:%s' % hostname, 'installer', default='none')
        if installer == 'none':
            continue
        code = ssh(hostname, ['uname', '-a'], keyfile=keyfile, sudo=True)
        if code != 0:
            sys.stderr.write("Failed to run passwordless sudo on host %s.\n" % (hostname))
            failed = True
            continue
    if failed:
        sys.stderr.write("Failed to access all hosts.\n");
        code = 1
    else:
        sys.stdout.write("Ok.\n");
        code = 0
    return code


def main():
    """Command line handling for the afs-robotest tool."""

    def common_options(p):
        p.add_argument('-c', '--config', help="config file", default=None)
        p.add_argument('-v', '--verbose', help="run verbosely", default=False, action='store_true')

    # This should be run as a normal user; sudo is called for installation as needed.
    if os.geteuid() == 0:
        sys.stderr.write("%s: Should not be run as root!\n" % (sys.argv[0]))
        sys.exit(1)

    # Parse command line options.
    parser = CommandLineParser()
    subparsers = parser.add_subparsers(title="commands", metavar="<command>")

    #
    # afs-robotest config
    #
    p = subparsers.add_parser('config', help="get or set configuration")
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('init', help="create initial config file")
    common_options(p)
    p.add_argument('--newconfig', help="config filename to write", default=None)
    p.set_defaults(_cmd=cmd_config_init)

    p = ssp.add_parser('list', help="show configuration values")
    common_options(p)
    p.add_argument('-x', '--expand', action='store_true', help="expand interpolated values")
    p.add_argument('-s', '--section', help="config section")
    p.set_defaults(_cmd=cmd_config_list)

    p = ssp.add_parser('set', help="set a configuration value")
    common_options(p)
    p.add_argument('section', metavar='<section>', help="section name")
    p.add_argument('option', metavar='<option>', help="option name")
    p.add_argument('value', metavar='<value>', help="option value")
    p.add_argument('--newconfig', help="config filename to write", default=None)
    p.set_defaults(_cmd=cmd_config_set)

    #
    # afs-robotest sshkeys
    #
    p = subparsers.add_parser('sshkeys', help="distribute ssh keys")
    ssp = p.add_subparsers(title="actions", metavar="<action>")
    p = ssp.add_parser('create', help="create an ssh key pair")
    common_options(p)
    p.add_argument('-t', dest='keytype', metavar='<type>', help="ssh key type (default: rsa)", default='rsa')
    p.set_defaults(_cmd=cmd_sshkeys_create)

    p = ssp.add_parser('dist', help="distribute ssh public key to hosts")
    common_options(p)
    p.set_defaults(_cmd=cmd_sshkeys_dist)

    p = ssp.add_parser('check', help="check passwordless ssh access to hosts")
    common_options(p)
    p.set_defaults(_cmd=cmd_sshkeys_check)

    #
    # afs-robotest web
    #
    p = subparsers.add_parser('web', help="run the test report web server")
    ssp = p.add_subparsers(title="actions", metavar="<action>")

    p = ssp.add_parser('start', help="start web server")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_start)

    p = ssp.add_parser('stop', help="stop web server")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_stop)

    p = ssp.add_parser('status', help="show web server status")
    common_options(p)
    p.set_defaults(_cmd=cmd_web_status)

    #
    # afs-robotest setup
    #
    p = subparsers.add_parser('setup', help='install and setup OpenAFS')
    common_options(p)
    p.add_argument('--force', action='store_true', help='overwrite existing files', default=None)
    p.set_defaults(_cmd=cmd_setup)

    #
    # afs-robotest run
    #
    p = subparsers.add_parser('run', help="run the tests")
    common_options(p)
    p.add_argument('-s', '--suite', help="test suite to run (default: all)", default=None)
    p.set_defaults(_cmd=cmd_run)

    #
    # afs-robotest login
    #
    p = subparsers.add_parser('login', help="obtain a token")
    common_options(p)
    p.set_defaults(_cmd=cmd_login)

    #
    # afs-robotest teardown
    #
    p = subparsers.add_parser('teardown', help="remove OpenAFS")
    common_options(p)
    p.set_defaults(_cmd=cmd_teardown)

    args = parser.parse_args()
    try:
        config = Config(args.config)  # Optional path to the configuration file.
    except Exception as e:
        sys.stderr.write("Failed reading config file: %s\n" % (e))
        sys.exit(1)

    rc = args._cmd(args, config)
    sys.exit(rc)

if __name__ == "__main__":
    sys.exit(main())

