---
#
# Create a new OpenAFS cell with a set of clients and servers. Run the
# realm.yaml playbook before this to create a Kerberos realm, the service keys,
# and an admin pricipal and keytab (or provide the same.)
#

# First retrieve the addresses of all of the database servers. The results are
# saved in the csdb.yaml file on the controller. Alternatively, set the
# afs_csdb inventory variable.

- name: Create CellServDB
  hosts: afs_databases
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_common
        tasks_from: generate_csdb

#
# Install and setup the fileservers and database servers.
#
- name: Install servers
  hosts: afs_databases:afs_fileservers
  collections:
    - openafs_contrib.openafs
  vars:
    # Create fake /vicep partitions for testing purposes.
    afs_pseudo_partitions: ['a', 'b', 'c']
  tasks:
    - import_role:
        name: openafs_server

#
# Install and setup the clients.
#
- name: Install clients
  hosts: afs_clients
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_krbclient
    - import_role:
        name: openafs_client

#
# Create the top-level cell volumes and some initial users.
#
- name: New cell
  hosts: afs_admin
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_krbclient

    - import_role:
        name: openafs_client

    - name: Upload admin keytab
      copy:
        src: "{{ afs_cell_files }}/admin.keytab"
        dest: admin.keytab

    - name: Create top-level volumes
      openafs_contrib.openafs.openafs_volume:
        state: present
        name: "{{ item.name }}"
        mount: "{{ item.mount }}"
        acl: "{{ item.acl }}"
        replicas: 3
      with_items:
        - name: root.afs
          mount: /afs
          acl: "system:anyuser read"
        - name: root.cell
          mount: /afs/{{ afs_cell }}
          acl: "system:anyuser read"
        - name: test
          mount: /afs/{{ afs_cell }}/test
          acl:
            - "system:anyuser read"
            - "system:authuser write"

    - name: Create test users
      openafs_contrib.openafs.openafs_user:
        name: "{{ item }}"
        group: tester
      with_items:
        - alice
        - bob
        - charlie
