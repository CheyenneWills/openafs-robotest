---
{% if cookiecutter.build_target != 'sdist' -%}
{% raw -%}
- name: Update kernel
  hosts: all
  tasks:
    - set_fact:
        afs_prep_update_kernel: "{{ lookup('env', 'AFS_PREP_UPDATE_KERNEL') | d('yes', true) | bool }}"
      when: afs_prep_update_kernel is undefined

    - name: Update kernel
      when:
        - afs_prep_update_kernel
        - ansible_pkg_mgr in ('yum', 'dnf')
      become: yes
      block:
        - name: Ensure kernel is up to date (yum).
          yum:
            state: latest
            name:
              - kernel
              - kernel-devel
          register: yum_update_results

        - name: Reboot
          reboot:
            reboot_timeout: 600
          when: yum_update_results.changed

        - name: Wait for connection
          wait_for_connection:

        - name: Gather facts
          setup:

    - name: Update kernel
      when:
        - afs_prep_update_kernel
        - ansible_pkg_mgr == 'apt'
      become: yes
      block:
        - name: Ensure kernel is up to date (apt).
          apt:
            state: latest
            name: 'linux-image*'
            only_upgrade: yes
            update_cache: yes
          register: apt_update_results

        - name: Reboot
          reboot:
            reboot_timeout: 600
          when: apt_update_results.changed

        - name: Wait for connection
          wait_for_connection:

        - name: Gather facts
          setup:
{% endraw -%}
{% endif %}
{% if cookiecutter.build_target == 'bdist' -%}
{% raw -%}
- name: Build binary distribution
  hosts: afs_builders
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_devel

    - set_fact:
        afs_source: '~/openafs'
      when: afs_source is undefined

    - name: Checkout source
      git:
        repo: "{{ afs_git_repo | d('git@git.openafs.org/openafs.git') }}"
        version: "{{ afs_git_version | d('master') }}"
        dest: "{{ afs_source }}"

    - name: Determine version string
      command:
        cmd: build-tools/git-version .
        chdir: "{{ afs_source }}"
      changed_when: false
      register: git_version

    - set_fact:
        afs_version: "{{ git_version.stdout | replace('-', '_') }}"

    - name: Lookup configure options
      set_fact:
        afs_configure_options: "{{ lookup('file', afs_configure_file) | from_yaml }}"
      when:
        - afs_configure_options is undefined
        - afs_configure_file is defined
        - afs_configure_file != ''

    - name: Set default configure options (modern style)
      set_fact:
        afs_configure_options:
          enable:
            - debug
            - debug-kernel
            - kernel-module
          with:
            - linux-kernel-packaging
      when:
        - afs_configure_options is undefined
        - afs_bdist_style == 'modern'

    - name: Set default configure options (transarc style)
      set_fact:
        afs_configure_options:
          enable:
            - debug
            - debug-kernel
            - kernel-module
            - transarc-paths
          with:
            - linux-kernel-packaging
      when:
        - afs_configure_options is undefined
        - afs_bdist_style == 'transarc'

    - debug:
        var: afs_configure_options

    - name: Build binary distribution
      openafs_build:
        target: install
        clean: yes
        projectdir: "{{ afs_source }}"
        destdir: "{{ afs_source }}/packaging/dest"
        configure_options: "{{ afs_configure_options }}"
      register: build_results

    - debug:
        var: build_results

    - set_fact:
        osdist: "{{ ansible_distribution | lower + ansible_distribution_major_version }}"
        arch: "{{ ansible_architecture }}"

    - set_fact:
        tarball: "openafs-{{ afs_version }}-{{ osdist }}-{{ arch }}.{{ afs_bdist_name | d('bdist') }}.tar.gz"

    - name: Create archive
      archive:
        path: "{{ afs_source }}/packaging/dest/"
        dest: "{{ tarball }}"
        format: gz

    - name: Download
      fetch:
        flat: yes
        src: "{{ tarball }}"
        dest: "{{ afs_builds }}/"
      register: fetch_results

    - name: Downloaded
      debug:
        msg: "{{ fetch_results.dest }}"
{% endraw -%}
{% elif cookiecutter.build_target == 'sdist' -%}
{% raw -%}
- name: Build source distribution
  hosts: all
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_devel

    - set_fact:
        afs_source: '~/openafs'
      when: afs_source is undefined

    - name: Checkout source
      git:
        repo: "{{ afs_git_repo | d('git@git.openafs.org/openafs.git') }}"
        version: "{{ afs_git_version | d('master') }}"
        dest: "{{ afs_source }}"

    - name: Determine version string
      command:
        cmd: build-tools/git-version .
        chdir: "{{ afs_source }}"
      changed_when: false
      register: git_version

    - set_fact:
        afs_version: "{{ git_version.stdout | replace('-', '_') }}"

    - name: Autoconf
      command:
        cmd: ./regen.sh
        chdir: "{{ afs_source }}"

    - name: Generate makefile
      command:
        cmd: ./configure --disable-kernel-module
        chdir: "{{ afs_source }}"

    - name: Create source distribution files
      command:
        cmd: make dist
        chdir: "{{ afs_source }}"

    - name: Create archive
      archive:
        path: "~/openafs/packages/"
        dest: "openafs-{{ afs_version }}-sdist.tar.gz"
        format: gz

    - name: Download
      fetch:
        flat: yes
        src: "openafs-{{ afs_version }}-sdist.tar.gz"
        dest: "{{ afs_builds }}/"
      register: fetch_results

    - name: Downloaded
      debug:
        var: fetch_results.dest
{% endraw -%}
{% elif cookiecutter.build_target == 'packages' -%}
{% raw -%}
- name: Build packages
  hosts: all
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_devel

    - set_fact:
        afs_source: '~/openafs'
      when: afs_source is undefined

    - name: Checkout source
      git:
        repo: "{{ afs_git_repo | d('git@git.openafs.org/openafs.git') }}"
        version: "{{ afs_git_version | d('master') }}"
        dest: "{{ afs_source }}"

    - name: Determine version string
      command:
        cmd: build-tools/git-version .
        chdir: "{{ afs_source }}"
      changed_when: false
      register: git_version

    - set_fact:
        afs_version: "{{ git_version.stdout | replace('-', '_') }}"

    - name: Autoconf
      command:
        cmd: ./regen.sh
        chdir: "{{ afs_source }}"

    - name: Generate makefile
      command:
        cmd: ./configure --disable-kernel-module
        chdir: "{{ afs_source }}"

    - name: Create source RPM
      command:
        cmd: make dist srpm
        chdir: "{{ afs_source }}"

    - name: Create rpmbuild workspace
      file:
        state: directory
        path: "{{ afs_source }}/packages/rpmbuild"
      register: mkdir_results

    - name: Set build facts
      set_fact:
        workspace: "{{ mkdir_results.path }}"
        dist: "{{ ansible_distribution | replace(' ', '_') | lower + ansible_distribution_major_version }}"
        arch: "{{ ansible_architecture }}"

    - name: Build RPMs
      shell:
        cmd: rpmbuild --rebuild --define "_topdir {{ workspace }}" packages/openafs-*.src.rpm
        chdir: "{{ afs_source }}"
      register: rpmbuild_results

    - debug:
        msg: "{{ rpmbuild_results.stdout_lines[-20:] }}"

    - name: Create archive
      archive:
        path: "{{ workspace }}/RPMS/{{ ansible_architecture }}/*.rpm"
        dest: "openafs-{{ afs_version }}-{{ dist }}-{{ arch }}.rpms.tar.gz"
        format: gz

    - name: Download
      fetch:
        flat: yes
        src: "openafs-{{ afs_version }}-{{ dist }}-{{ arch }}.rpms.tar.gz"
        dest: "{{ afs_builds }}/"
      register: fetch_results

    - name: Downloaded
      debug:
        msg: "{{ fetch_results.dest }}"
{% endraw -%}
{% endif -%}
