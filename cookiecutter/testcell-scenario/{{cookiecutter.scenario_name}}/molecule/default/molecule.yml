---
dependency:
  name: galaxy

driver:
  name: {{ cookiecutter.molecule_driver_name }}

platforms:
{%- if cookiecutter.configuration == 'single' %}
  - name: m-afs01
    box: "${AFS_BOX:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_admin_client
      - afs_clients
      - afs_databases
      - afs_fileservers
      - afs_kdcs
      - afs_test
{%- elif cookiecutter.configuration == 'cluster' %}
  - name: m-afs01
    box: "${AFS_BOX_01:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_databases
      - afs_kdcs

  - name: m-afs02
    box: "${AFS_BOX_02:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_fileservers

  - name: m-afs03
    box: "${AFS_BOX_03:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_fileservers

  - name: m-afs04
    box: "${AFS_BOX_04:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_admin_client
      - afs_clients
      - afs_test

  - name: m-afs05
    box: "${AFS_BOX_05:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_clients

  - name: m-afs06
    box: "${AFS_BOX_06:-{{ cookiecutter.image_name }}}"
    groups:
      - afs_clients
{%- endif %}

provisioner:
  name: ansible
  env:
    ANSIBLE_VERBOSITY: 0
    ANSIBLE_STDOUT_CALLBACK: yaml
  inventory:
    group_vars:
      all:
        # Instance preparation.
        afs_prep_update_kernel: "${AFS_PREP_UPDATE_KERNEL:-yes}"
        afs_prep_ssh_keys: "${AFS_PREP_SSH_KEYS}"
        afs_prep_rewrite_etc_hosts: "${AFS_PREP_REWRITE_ETC_HOSTS:-no}"
        afs_prep_selinux_mode: "${AFS_PREP_SELINUX_MODE:-permissive}"

        # Test cell setup.
        afs_realm: "${AFS_REALM:-EXAMPLE.COM}"
        afs_cell: "${AFS_CELL:-example.com}"
        afs_security_model: "none"
        afs_install_method: "{{ cookiecutter.install_method }}"
{%- if cookiecutter.install_method == 'managed' %}
        afs_module_install_method: "{{ cookiecutter.module_install_method }}"
{%- elif cookiecutter.install_method == 'packages' %}
        afs_install_archive: "${AFS_INSTALL_ARCHIVE}"
        afs_module_install_method: "{{ cookiecutter.module_install_method }}"
        afs_builds: "${AFS_BUILDS:-../../../../../builds}"
{%- elif cookiecutter.install_method == 'bdist' %}
        afs_install_archive: "${AFS_INSTALL_ARCHIVE}"
        afs_bdist_name: "${AFS_BDIST_NAME:-bdist}"
        afs_builds: "${AFS_BUILDS:-../../../../../builds}"
{%- elif cookiecutter.install_method == 'sdist' %}
        afs_install_archive: "${AFS_INSTALL_ARCHIVE}"
        afs_builds: "${AFS_BUILDS:-../../../../../builds}"
{%- elif cookiecutter.install_method == 'scm' %}
        afs_git_repo: "${AFS_GIT_REPO:-git://git.openafs.org/openafs.git}"
        afs_git_version: "${AFS_GIT_VERSION:-master}"
{%- endif %}

        # Molecule environment
        afs_cell_files: "${MOLECULE_EPHEMERAL_DIRECTORY}"
        afs_csdb_file: "${MOLECULE_EPHEMERAL_DIRECTORY}/csdb.yaml"

        # Test file servers.
{%- if cookiecutter.configuration == 'single' %}
        afs_robotest_fileserver_a: "m-afs01"
{%- elif cookiecutter.configuration == 'cluster' %}
        afs_robotest_fileserver_a: "m-afs02"
        afs_robotest_fileserver_b: "m-afs03"
{%- endif %}

verifier:
  name: robotframework
  group: afs_test
  libraries:
    - robotframework-openafslibrary
{%- if cookiecutter._template.startswith('https:') or
       cookiecutter._template.startswith('http:') or
       cookiecutter._template.startswith('gh:') %}
  test_repos:
    - name: openafs-robotest
      repo: {{ cookiecutter._template | replace('gh:', 'https://github.com/') }}
      version: master
{%- else %}
  test_directory: openafs-robotest
  test_data:
    - {{ cookiecutter._template }}/tests
{%- endif %}
  resources:
    - ${MOLECULE_SCENARIO_DIRECTORY}/openafs-robotest.yml.j2
  options:
    exclude:
      - bug
      - slow
      - rogue-avoidance
{%- if cookiecutter.configuration == 'single' %}
      - requires-multi-fs
{%- endif %}
    loglevel: INFO
    runemptysuite: true
    variablefile: openafs-robotest.yml
  data_sources:
    - openafs-robotest/tests

scenario:
  create_sequence:
    - create
    - prepare
  check_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - create
    - prepare
    - converge
  destroy_sequence:
    - cleanup
    - destroy
  test_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - verify
    - cleanup
    - destroy
